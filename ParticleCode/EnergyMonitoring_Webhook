// This #include statement was automatically added by the Particle IDE.
#include <EmonLib.h>

#include "Particle.h"

double Emon;
double Irms;
double power;
double volts = 120;
float cal;
float calib = 1;

double Modern;
double ModernCalib = 1;
double ModernIntercept = 0;
double ModernReading;
double ModernPower1=0;
double ModernPowerPrev=0;
double previousReading=0;


double EmonPower1;
EnergyMonitor emon1;

float ModernCal(String command); // declare ModernCal function
int modernPin = A3;


int publish_rate = 10 * 1000; // how often you want device to publish to google sheets data log, in milliseconds
const char *eventName = "LoraxArgon_Gsheets_DataLog"; // event name of webhook integration on console
/**/

unsigned long lastPublish; // timestamp of last time a Gsheets event was published
void publishGsheetsEvent(); // function to format and publish sensor temp data to Gsheets event


void setup() {
    
    cal = (20 / 0.05) / 46; // CT Amps / 0.05 Amnps  /  22 Ohm
    
    
    Particle.variable("Emon_raw_Pinout",Emon);
    Particle.variable("IRms_Emon",Irms);
    Particle.variable("Emon_power",power);
    Particle.variable("Modern_power",Modern);
    Particle.variable("Modern_cal",ModernCalib);
    Particle.variable("Modern_int",ModernIntercept);
    
    Particle.variable("webhook_rate", publish_rate); // Gsheets webhook publish frequency variable
    
    Particle.function("EmonCal", EmonCal);
    Particle.function("ModernCal", ModernCal);
    
    emon1.current(A4, cal);  
    
    }

void loop() {
    double output1 = analogRead(A4);
    Emon= 3.3 * output1 / 4095;
    
    Irms = emon1.calcIrms(5500);  // Calculate Irms only including number of samples
    power = volts * Irms;
    
    ModernReading = analogRead(modernPin);
    Modern = ModernReading * ModernCalib + ModernIntercept;
    
          
    if (Particle.connected()) {
        // millis() gives the current system clock in milliseconds. 
        // The if statement comparies how long it has been since the last Gsheets event to the publish rate, and runs PublishGsheetsEvent() if longer than publish_rate
        // The advantage of this method (though more complicated and memory intensive), is that other code can run while waiting for a Gsheets publish event
        // Conversely, delay() will not allow any other code to execute while it waits for its timer to finish.
        if (millis() - lastPublish >= publish_rate) {
            lastPublish = millis();
            publishGsheetsEvent();
        }
    }
    Particle.publish("output", "MD_power: " + String(Modern) + " Volts: " + String(volts) + " Irms: " + String(Irms) + " Power: " + String(power));
    
    delay(3000);
    }
    
// Function to format and publish temp data to the Gsheets 
void publishGsheetsEvent() {
    char buf[128];
    snprintf(buf, sizeof(buf), "[%.2f,%.2f,%.2f,%.2f]", Modern, volts, Irms, power); // Format temp data for the google sheet
    
    Particle.publish(eventName, buf, PRIVATE); // Publish with the name used for the webhook integration
}

float ModernCal(String command) {
  // Parse 
  ModernPower1 = command.toFloat();
  ModernCalib = (ModernPower1 - ModernPowerPrev) / (ModernReading - previousReading);
  ModernIntercept = ModernPower1 - (ModernCalib * ModernReading);
  previousReading = ModernReading;
  ModernPowerPrev = ModernPower1; 
  return ModernCalib;
}

float EmonCal(String command2) {
  // look for the matching argument "coffee" <-- max of 64 characters long
  float result2 = command2.toFloat();
  cal = result2;
  emon1.current(A4, cal);
  return cal;
}
