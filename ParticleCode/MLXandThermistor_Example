// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_MLX90614.h>

//Thermistor include files
#include "math.h"
#include <application.h>


/*************************************************** 
  This is a library example for the MLX90614 Temp Sensor

  Designed specifically to work with the MLX90614 sensors in the
  adafruit shop
  ----> https://www.adafruit.com/products/1748
  ----> https://www.adafruit.com/products/1749

  These sensors use I2C to communicate, 2 pins are required to  
  interface
  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/
//Thermistor definitions
#define TEMPERATURENOMINAL 25   
#define NUMSAMPLES 5
#define BCOEFFICIENT 3950
#define SERIESRESISTOR 10000

uint16_t samples[NUMSAMPLES];
uint8_t i;
float average;
 
int globePin = A0; // What pin to connect the thermistor to

double temperature = 0; // thermistor temp variable


/* USER INPUT */
int sample_rate = 2 * 1000; // how often you want device to publish where the number in front of a thousand is the seconds you want
/**/

double objectT = 0;
double ambientT = 0;


Adafruit_MLX90614 mlx = Adafruit_MLX90614();

void setup() {
    // Experimental notes
    Particle.variable("rate", sample_rate);  // Publish frequency

    Particle.variable("object", objectT);
    Particle.variable("ambient", ambientT);
    
    Particle.variable("thermistor",temperature);

    mlx.begin();  
}

void loop() {
    
    ambientT = mlx.readAmbientTempC();
    objectT = mlx.readObjectTempC();

    temperature = therm(globePin);

    /* ENCODE + PUBLISH */
 
    //Particle.publish("mlx.c,2 ","object:"+String(objectT)+" ambient:"+String(ambientT)+" ");
  
    //Particle.publish("object", String(objectT), PRIVATE);
    //Particle.publish("ambient", String(ambientT), PRIVATE);
    Particle.publish("MLX_objT, MLX_ambT, Therm_T ", "Object: "+String(objectT)+", Ambient: "+String(ambientT)+", Thermistor: "+String(temperature)+" ");
    
    delay(sample_rate);

}

//this is the function that measures the voltage across the thermistor and 
//calcualtes the resistance. a number of samples are collected and averaged,
//NUMSAMPLES specifies this number above, to smooth noise
double therm(int pin) {
  
  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = analogRead(pin);
   delay(10);
  }
 
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
     average += samples[i];
  }
  average /= NUMSAMPLES;
  
  double reading = average;

 
  // convert the value to resistance
  reading = (4095 / reading)  - 1;     // (4095/ADC - 1) 
  reading = SERIESRESISTOR / reading;  // 10K / (1023/ADC - 1)
  
  //the steinart method is a standard method of mapping the resistance reading
  //to a temperature
  float steinhart;
  steinhart = reading / SERIESRESISTOR;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                 // Invert
  steinhart -= 273.15;                         // convert to C
  
  
//return the calculated value, which is a temperature!  
  return steinhart;
}
